//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: game_network.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate GameNetwork_GreeterClient, then call methods of this protocol to make API calls.
internal protocol GameNetwork_GreeterClientProtocol: GRPCClient {
  var interceptors: GameNetwork_GreeterClientInterceptorFactoryProtocol? { get }

  func sayHello(
    _ request: GameNetwork_HelloRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GameNetwork_HelloRequest, GameNetwork_HelloReply>
}

extension GameNetwork_GreeterClientProtocol {

  /// Sends a greeting.
  ///
  /// - Parameters:
  ///   - request: Request to send to SayHello.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sayHello(
    _ request: GameNetwork_HelloRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GameNetwork_HelloRequest, GameNetwork_HelloReply> {
    return self.makeUnaryCall(
      path: "/game_network.Greeter/SayHello",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloInterceptors() ?? []
    )
  }
}

internal protocol GameNetwork_GreeterClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'sayHello'.
  func makeSayHelloInterceptors() -> [ClientInterceptor<GameNetwork_HelloRequest, GameNetwork_HelloReply>]
}

internal final class GameNetwork_GreeterClient: GameNetwork_GreeterClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: GameNetwork_GreeterClientInterceptorFactoryProtocol?

  /// Creates a client for the game_network.Greeter service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: GameNetwork_GreeterClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Usage: instantiate GameNetwork_GameNetworkClient, then call methods of this protocol to make API calls.
internal protocol GameNetwork_GameNetworkClientProtocol: GRPCClient {
  var interceptors: GameNetwork_GameNetworkClientInterceptorFactoryProtocol? { get }

  func registerDevice(
    _ request: GameNetwork_DeviceRegistrationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GameNetwork_DeviceRegistrationRequest, GameNetwork_DeviceRegistrationReply>

  func licenseVerificationData(
    _ request: GameNetwork_LicenseVerificationDataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GameNetwork_LicenseVerificationDataRequest, GameNetwork_LicenseData>

  func verifyLicense(
    _ request: GameNetwork_LicenseVerificationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GameNetwork_LicenseVerificationRequest, GameNetwork_LicenseSession>

  func registerPeer(
    _ request: GameNetwork_PeerRegistrationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GameNetwork_PeerRegistrationRequest, GameNetwork_PeerRegistrationReply>

  func getPeersList(
    _ request: GameNetwork_PeerListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GameNetwork_PeerListRequest, GameNetwork_PeerListReply>
}

extension GameNetwork_GameNetworkClientProtocol {

  /// Device Registration
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterDevice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerDevice(
    _ request: GameNetwork_DeviceRegistrationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GameNetwork_DeviceRegistrationRequest, GameNetwork_DeviceRegistrationReply> {
    return self.makeUnaryCall(
      path: "/game_network.GameNetwork/RegisterDevice",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterDeviceInterceptors() ?? []
    )
  }

  /// Engine Licensing
  ///
  /// - Parameters:
  ///   - request: Request to send to LicenseVerificationData.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func licenseVerificationData(
    _ request: GameNetwork_LicenseVerificationDataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GameNetwork_LicenseVerificationDataRequest, GameNetwork_LicenseData> {
    return self.makeUnaryCall(
      path: "/game_network.GameNetwork/LicenseVerificationData",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLicenseVerificationDataInterceptors() ?? []
    )
  }

  /// Unary call to VerifyLicense
  ///
  /// - Parameters:
  ///   - request: Request to send to VerifyLicense.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func verifyLicense(
    _ request: GameNetwork_LicenseVerificationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GameNetwork_LicenseVerificationRequest, GameNetwork_LicenseSession> {
    return self.makeUnaryCall(
      path: "/game_network.GameNetwork/VerifyLicense",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVerifyLicenseInterceptors() ?? []
    )
  }

  /// Peering
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterPeer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerPeer(
    _ request: GameNetwork_PeerRegistrationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GameNetwork_PeerRegistrationRequest, GameNetwork_PeerRegistrationReply> {
    return self.makeUnaryCall(
      path: "/game_network.GameNetwork/RegisterPeer",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterPeerInterceptors() ?? []
    )
  }

  /// Unary call to GetPeersList
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPeersList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getPeersList(
    _ request: GameNetwork_PeerListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GameNetwork_PeerListRequest, GameNetwork_PeerListReply> {
    return self.makeUnaryCall(
      path: "/game_network.GameNetwork/GetPeersList",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPeersListInterceptors() ?? []
    )
  }
}

internal protocol GameNetwork_GameNetworkClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'registerDevice'.
  func makeRegisterDeviceInterceptors() -> [ClientInterceptor<GameNetwork_DeviceRegistrationRequest, GameNetwork_DeviceRegistrationReply>]

  /// - Returns: Interceptors to use when invoking 'licenseVerificationData'.
  func makeLicenseVerificationDataInterceptors() -> [ClientInterceptor<GameNetwork_LicenseVerificationDataRequest, GameNetwork_LicenseData>]

  /// - Returns: Interceptors to use when invoking 'verifyLicense'.
  func makeVerifyLicenseInterceptors() -> [ClientInterceptor<GameNetwork_LicenseVerificationRequest, GameNetwork_LicenseSession>]

  /// - Returns: Interceptors to use when invoking 'registerPeer'.
  func makeRegisterPeerInterceptors() -> [ClientInterceptor<GameNetwork_PeerRegistrationRequest, GameNetwork_PeerRegistrationReply>]

  /// - Returns: Interceptors to use when invoking 'getPeersList'.
  func makeGetPeersListInterceptors() -> [ClientInterceptor<GameNetwork_PeerListRequest, GameNetwork_PeerListReply>]
}

internal final class GameNetwork_GameNetworkClient: GameNetwork_GameNetworkClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: GameNetwork_GameNetworkClientInterceptorFactoryProtocol?

  /// Creates a client for the game_network.GameNetwork service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: GameNetwork_GameNetworkClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol GameNetwork_GreeterProvider: CallHandlerProvider {
  var interceptors: GameNetwork_GreeterServerInterceptorFactoryProtocol? { get }

  /// Sends a greeting.
  func sayHello(request: GameNetwork_HelloRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GameNetwork_HelloReply>
}

extension GameNetwork_GreeterProvider {
  internal var serviceName: Substring { return "game_network.Greeter" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(
    _ methodName: Substring,
    callHandlerContext: CallHandlerContext
  ) -> GRPCCallHandler? {
    switch methodName {
    case "SayHello":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeSayHelloInterceptors() ?? []
      ) { context in
        return { request in
          self.sayHello(request: request, context: context)
        }
      }

    default:
      return nil
    }
  }
}

internal protocol GameNetwork_GreeterServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'sayHello'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSayHelloInterceptors() -> [ServerInterceptor<GameNetwork_HelloRequest, GameNetwork_HelloReply>]
}
/// To build a server, implement a class that conforms to this protocol.
internal protocol GameNetwork_GameNetworkProvider: CallHandlerProvider {
  var interceptors: GameNetwork_GameNetworkServerInterceptorFactoryProtocol? { get }

  /// Device Registration
  func registerDevice(request: GameNetwork_DeviceRegistrationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GameNetwork_DeviceRegistrationReply>

  /// Engine Licensing
  func licenseVerificationData(request: GameNetwork_LicenseVerificationDataRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GameNetwork_LicenseData>

  func verifyLicense(request: GameNetwork_LicenseVerificationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GameNetwork_LicenseSession>

  /// Peering
  func registerPeer(request: GameNetwork_PeerRegistrationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GameNetwork_PeerRegistrationReply>

  func getPeersList(request: GameNetwork_PeerListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GameNetwork_PeerListReply>
}

extension GameNetwork_GameNetworkProvider {
  internal var serviceName: Substring { return "game_network.GameNetwork" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(
    _ methodName: Substring,
    callHandlerContext: CallHandlerContext
  ) -> GRPCCallHandler? {
    switch methodName {
    case "RegisterDevice":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeRegisterDeviceInterceptors() ?? []
      ) { context in
        return { request in
          self.registerDevice(request: request, context: context)
        }
      }

    case "LicenseVerificationData":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeLicenseVerificationDataInterceptors() ?? []
      ) { context in
        return { request in
          self.licenseVerificationData(request: request, context: context)
        }
      }

    case "VerifyLicense":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeVerifyLicenseInterceptors() ?? []
      ) { context in
        return { request in
          self.verifyLicense(request: request, context: context)
        }
      }

    case "RegisterPeer":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeRegisterPeerInterceptors() ?? []
      ) { context in
        return { request in
          self.registerPeer(request: request, context: context)
        }
      }

    case "GetPeersList":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeGetPeersListInterceptors() ?? []
      ) { context in
        return { request in
          self.getPeersList(request: request, context: context)
        }
      }

    default:
      return nil
    }
  }
}

internal protocol GameNetwork_GameNetworkServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'registerDevice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterDeviceInterceptors() -> [ServerInterceptor<GameNetwork_DeviceRegistrationRequest, GameNetwork_DeviceRegistrationReply>]

  /// - Returns: Interceptors to use when handling 'licenseVerificationData'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLicenseVerificationDataInterceptors() -> [ServerInterceptor<GameNetwork_LicenseVerificationDataRequest, GameNetwork_LicenseData>]

  /// - Returns: Interceptors to use when handling 'verifyLicense'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVerifyLicenseInterceptors() -> [ServerInterceptor<GameNetwork_LicenseVerificationRequest, GameNetwork_LicenseSession>]

  /// - Returns: Interceptors to use when handling 'registerPeer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterPeerInterceptors() -> [ServerInterceptor<GameNetwork_PeerRegistrationRequest, GameNetwork_PeerRegistrationReply>]

  /// - Returns: Interceptors to use when handling 'getPeersList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPeersListInterceptors() -> [ServerInterceptor<GameNetwork_PeerListRequest, GameNetwork_PeerListReply>]
}
