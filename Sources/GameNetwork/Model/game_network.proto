syntax = "proto3";

option java_multiple_files = true;
option java_package = "gladiatorengine.Engine.proto";
option java_outer_classname = "GameNetworkProto";
option objc_class_prefix = "GNP";

package game_network;

// The greeting service definition.
service Greeter {
    // Sends a greeting.
    rpc SayHello (HelloRequest) returns (HelloReply) {}
}

// The request message containing the user's name.
message HelloRequest {
    string name = 1;
}

// The response message containing the greetings.
message HelloReply {
    string message = 1;
}

// MARK: - Game Network

service GameNetwork {
    // Device Registration
    rpc RegisterDevice (DeviceRegistrationRequest) returns (DeviceRegistrationReply) {}
    
    // Engine Licensing
    rpc LicenseVerificationData (LicenseVerificationDataRequest) returns (LicenseData) {}
    rpc VerifyLicense (LicenseVerificationRequest) returns (LicenseSession) {}
    
    // Peering
    rpc RegisterPeer (PeerRegistrationRequest) returns (PeerRegistrationReply) {}
    rpc GetPeersList (PeerListRequest) returns (PeerListReply) {}
}

// Device Registration
message DeviceRegistrationRequest {
    string publicKey = 1; // e.g.: public key for licensing
    string deviceID = 2; // e.g.: unique UUID stored on device
    string os = 3; // e.g.: macOS 11 Big Sur
    string platform = 4; // e.g.: Intel, Apple Silicon
}
message DeviceRegistrationReply {
    string deviceToken = 1; // Token used for device identification
    int64 expirationDate = 2; // Expiration date of the token
}

// Engine Licensing
message LicenseVerificationDataRequest {
    string deviceToken = 1; // Device's token
    string deviceSignature = 2; // Signature of device's ID
}
message LicenseData {
    string data = 1; // Data to be signed using private key
}
message LicenseVerificationRequest {
    string deviceToken = 1; // Device's token
    string dataSignature = 2; // Signature of given data
}
message LicenseSession {
    string licenseID = 1; // License's ID to identify device with licensed game's engine
    string licenseToken = 2; // License's token to verify requests
    int64 expirationDate = 3; // Expiration date of the token
}

// Peering
message Peer {
    string ip = 1; // IP of the peer
    int32 port = 2; // Port of the peer
}
message PeerRegistrationRequest {
    string licenseToken = 2; // License's token
    int32 port = 3; // Device's port determined using STUN and TURN
}
message PeerRegistrationReply {
    Peer peer = 1; // Your peer
}
message PeerListRequest {
    string licenseToken = 2; // License's token
}
message PeerListReply {
    repeated Peer peers = 1; // List of peers
}

